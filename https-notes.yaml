## June 18,2022
# Article 1 https://vinta.ws/code/how-https-works-in-laymans-terms-tls-1-2-and-1-3.html
# Article 2 https://techterms.com/definition/http
** Topic -->  How HTTPS Works in Layman's Terms - TLS 1.2 and 1.3

What is
  HTTP: Hypertext Transfer Protocol; it runs on port 80
  HTTPS: Hypertext Transfer Protocol Secure; it runs on port 443

  What is HTTP:
    * it is an internet protocol
    * It is used for transfering data over the web
    * It uses a client and server model

    it is a protocol on how we access the internet over a webrowser

    Some common HTTP status codes include:
    200: - successful request (the webpage exists)
    301: - moved permanently (often forwarded to a new URL)
    401: - unauthorized request (authorization required)
    403: - forbidden (access is not allowed to the page or directory)
    500: - internal server error (often caused by an incorrect server configuration)


SSL/TLS
  - SSL: Secure Sockets Layer
  - TLS: Transport Layer Security)

  # SSL is old version && TLS is new, but they mean and do the samething

    ** They perform the following
      - Privacy - encrypting data between client and server using Encryption Algorithms
      - Authentication - ensuring that server is who it claims to be using Certificates
      - Integrity - verifying that data have not been forged using Message Authentication Code (MAC)


  Symmetric = same | only one key
  Asymmetric = opposite | two keys


# Read more about base64 encoding and decoding with examples
https://linuxhint.com/bash_base64_encode_decode/


Overiew:
In this tutorial, you will learn how to base64 encode and decode from the command-line on Linux. You will also learn what base64 encoding is and why it should never be used to protect data from unauthorized access.

Base64 encoding and decoding data has many use cases. One being is ensuring data integrity when transferring data over the network, while another is storing Secrets in Kubernetes.

After reading this tutorial you will understand how to easily encode files or strings, and then decode them back.

How to base64 encode on Ubuntu, Debian, OSX, and Red Hat:
If you are running popular linux distributions, such as Ubuntu, Debian, CentOS, or Red Hat, the base64 command-line tool is typically pre-installed. You should not have to perform any additional steps.

OSX also comes bundled with its own version of base64.

Why Base64 Encode Data:
Transferring an ASCII file over the network can cause corruption if not decoded correctly. The reason is ASCII files are string converted to bytes, and when those bytes are decoded incorrectly back to ASCII your data becomes corrupt.

Base64 was introduced as a way to convert your ASCII data into arbitrary bytes, where they could then be transferred as bytes, and decoded correctly back to ASCII.

In short, base64 encoding ensures the integrity of our data when transferred over the network.

Base64 is not Encryption:
Encoding files is not encryption and should never be used to secure sensitive data on disk. Rather it is a useful way of transferring or storing large data in the form of a string.

While it may obfuscate that actual data from should surfers, anyone who has access to base64 encoded data can easily decode it.

Base64 Encoding a String:
To base64 encode string you can pipe an echo command into the base64 command-line tool. To ensure no extra, hidden characters are added use the -n flag.

Without the -n flag you may capture a hidden characters, like line returns or spaces, which will corrupt your base64 encoding.

echo -n 'my-string' | base64
Which will output the following

bXktc3RyaW5n
Base64 Encoding a File
To base64 encode a file

base64 /path/to/file
This will output a very long, base64 encoded string. You may want to write the stdout to file instead.

bas64 /path/to/file > output.txt

Decoding Strings:
To decode with base64 you need to use the --decode flag. With encoded string, you can pipe an echo command into base64 as you did to encode it.

Using the example encoding shown above, letâ€™s decode it back into its original form.

echo -n 'bXktc3RyaW5n' | base64 --decode
Provided your encoding was not corrupted the output should be your original string.

Decoding Files:
To decode a file with contents that are base64 encoded, you simply provide the path of the file with the --decode flag.

base64 --decode /path/to/file
As with encoding files, the output will be a very long string of the original file. You may want to output stdout directly to a file.

base64 --decode /path/to/file > output.txt

Conclusion:
In this tutorial, you learned how to base64 encode files and strings. This something commonly done to transfer files in such a way that it remains