# git & github tutorial.

  what is git: Git is what is we called a version control system that is free and open source. you dont need license or anything to pay before using it. this is the most widely used version control system in development today.
    Version Control: is a basically a way we as programers track our code changes. we save an initial version of our code into git. so when we update a code we can save it into git over and over. so it helps us to see what did over time and understands what ever we have been doing.
# some terms to note:
    Directory: this is alsio known as a Folder
     user term directory.
    Terminal or Command Line: interface for text commands. This  is an application that runs on your computer which is just an interface where you can type in text commands and it helps yoy to navigate on your local enviroment. 
    CLI: command line interface
    cd: stands for change directory
    Code Editor: word processor for writing code
    Repository:  in the world of programing is simply the place where your project is kept, so is like a folder as well. you can call it a repository.

# differnces b&w git and github: 
       Git-> is the tool that track changes over time.
        Github-> github is a website where you host all your git repositories. so is a remote enviroment.
      
# Git Commands:
    clone: to clone means bringing a repository that is not on your local enviroment, but is on github and you clone it down to use it locally. so you use the clone command.
  add
    add: the add command when you have updated files or deleted files you might want to tell git you made changes. so you run the add command so it track your file and changes in git.
    commit: the commit command save your files in git. that is commiting the changes to git.
    push: the push command simply upload git commits to your remote repo, which can be your github repository or what so ever you are using.
    pull: download changes from your remote repo to your local machine, which is the oposite of push. so you do this by pull command

# creating a repository: 
    i have one already so dnt need another one.
    git --version : you run this on your terminal to know if you already have git installed. And if you do not have git installed you can follow the steps below.
      for windows installation:  when you download the (get windows installer), you can choose the git bash optionb from the install menu. you can also use prompt and it will set up.
      for Mac OS: homebrew package manager will be good and easy and it takes you through all the steps here.

  code editor: for code editor i recommend you to download and use visual studio code,(code.visualstudio.com). it goes with most of the operation system we know like linux, mac os.

# Git Branching:
   Master Branch -> is the naming convention for the main or the default branch in in a repository. All your codes will be in that branch.
     what happens when you creat a new branch: 
         the code on the master branch will be exactly the same with that of the feature branch. But when you make updates on the feature branch those changes are only seen in the feature branch. so if you make changes on the feature branch you have to make commit to save the chnages on that branch. And when you swith back to the master branch you wont see the chnages you made on the feature branch.
   why is it usefull creating feature branches?:
      thats because you will be building out new features to applications that may break your code or they not finished yet.And you dont want to savw them to the main master branch. you want to work on them in kind of a sandbox area. so you can write all the codes unit and get it correct in the state that you want before you merge it back to the main branch of the code base.
          Note this is really helpfull when you have many people working on different repository or branches.
  # creating a new branch: 
     git checkout: is exactly the command you will use to switch between branches.
        But to tell it to creat a new branch you to use (-b) the you give the name you want to call it. so i will call mine for now ('feature-readme-instructiobs').
       When you hit enter yoiu have the new branch created 
        So when you do git branch again you will see that you have two branch listed.
    * feature-readme-instructions: that was my new branch and te star (*) symbol right behind the name shows thats the branch i am currently located in.
       Also noote when you want to get out of that page you hit (q) and it takes you to the directory where you  are.
        Now you do git checkout to switch between branches like mention above, when you run it you will have the output that your branch is up to date with 'origin/main'
         to switch back to main you do a git branch and now you will find the (*)behind main meaning you back on main branch.
        
   Now when you go to your remote repository and and open your readme.md and you come back to your terminal and do git status you will see the untract file because you added something inside.

git diff: this comand shows you all the lines or changes made.
git branch -d: -->if u run git branch -d and the name of the it delets the branch name.  And when you do git branch you will see the main branch you left with,
  -->git checkout -b: like earlier said is creating a new branc anc after the -b you give the name of the branch and is created.